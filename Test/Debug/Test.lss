
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800100  00000a48  00000adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  008001b8  008001b8  00000b94  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bf0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d6d  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fb  00000000  00000000  00001a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006af  00000000  00000000  00002438  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00002ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052d  00000000  00000000  00002cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047f  00000000  00000000  000031e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003660  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	11 c1       	rjmp	.+546    	; 0x228 <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	45 c0       	rjmp	.+138    	; 0xc8 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e4       	ldi	r30, 0x48	; 72
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 3b       	cpi	r26, 0xB8	; 184
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 eb       	ldi	r26, 0xB8	; 184
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 3b       	cpi	r26, 0xBB	; 187
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	50 d1       	rcall	.+672    	; 0x364 <main>
  c4:	bf c4       	rjmp	.+2430   	; 0xa44 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_15>:
	FlushReceiveData();
	sei();
}

SIGNAL(TIMER_INTER_VECT)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	cli();
  d4:	f8 94       	cli
	timerCnt++;
  d6:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
  da:	8f 5f       	subi	r24, 0xFF	; 255
  dc:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <__data_end>
	sei();
  e0:	78 94       	sei
}
  e2:	8f 91       	pop	r24
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <GetCdsValue>:

int GetCdsValue()
{
	int cdsValue = 0;
	
	ADCSRA |= (1 << ADSC);
  ee:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & (1 << ADIF)) == 0x00);
  f0:	34 9b       	sbis	0x06, 4	; 6
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <GetCdsValue+0x2>
	cdsValue = ADC;
  f4:	84 b1       	in	r24, 0x04	; 4
  f6:	95 b1       	in	r25, 0x05	; 5
	
	return cdsValue;
}
  f8:	08 95       	ret

000000fa <PlayBuzzorByMelody>:
	BUZZOR_PIN = 0x00;
}

void PlayBuzzorByMelody(char melody)
{
	if(INPUT_KEY_MEL_C_LOW <= melody && melody <= INPUT_KEY_MEL_C_HIGH)
  fa:	90 ed       	ldi	r25, 0xD0	; 208
  fc:	98 0f       	add	r25, r24
  fe:	98 30       	cpi	r25, 0x08	; 8
 100:	f0 f4       	brcc	.+60     	; 0x13e <PlayBuzzorByMelody+0x44>
	{
		BUZZOR_PIN = BUZZOR_PIN_MODE;
 102:	90 e8       	ldi	r25, 0x80	; 128
 104:	97 bb       	out	0x17, r25	; 23
		ICR1 = F_CPU / melodies[melody - INPUT_KEY_MEL_C_LOW];
 106:	e8 2f       	mov	r30, r24
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	e9 5b       	subi	r30, 0xB9	; 185
 110:	fe 4f       	sbci	r31, 0xFE	; 254
 112:	20 81       	ld	r18, Z
 114:	31 81       	ldd	r19, Z+1	; 0x01
 116:	40 e0       	ldi	r20, 0x00	; 0
 118:	50 e0       	ldi	r21, 0x00	; 0
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	70 e8       	ldi	r23, 0x80	; 128
 11e:	80 e7       	ldi	r24, 0x70	; 112
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	77 d1       	rcall	.+750    	; 0x412 <__divmodsi4>
 124:	37 bd       	out	0x27, r19	; 39
 126:	26 bd       	out	0x26, r18	; 38
		OCR1C = ICR1 / BUZZOR_DUTY;
 128:	86 b5       	in	r24, 0x26	; 38
 12a:	97 b5       	in	r25, 0x27	; 39
 12c:	23 e0       	ldi	r18, 0x03	; 3
 12e:	96 95       	lsr	r25
 130:	87 95       	ror	r24
 132:	2a 95       	dec	r18
 134:	e1 f7       	brne	.-8      	; 0x12e <PlayBuzzorByMelody+0x34>
 136:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 13a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 13e:	08 95       	ret

00000140 <PutChar>:
	DisableClock();
}

void PutChar(const char data)
{
	while((UCSR0A & (1 << UDRE0)) == 0x00)
 140:	5d 9b       	sbis	0x0b, 5	; 11
 142:	fe cf       	rjmp	.-4      	; 0x140 <PutChar>
	{
	}
	UDR0 = data;
 144:	8c b9       	out	0x0c, r24	; 12
	UCSR0A |= (1 << UDRE0);
 146:	5d 9a       	sbi	0x0b, 5	; 11
 148:	08 95       	ret

0000014a <PutString>:
}

void PutString(const char *str)
{
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	8c 01       	movw	r16, r24
	char index = 0;
 152:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[index] != '\0')
 154:	f8 01       	movw	r30, r16
 156:	ec 0f       	add	r30, r28
 158:	f1 1d       	adc	r31, r1
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	19 f0       	breq	.+6      	; 0x166 <PutString+0x1c>
	{
		PutChar(str[index++]);
 160:	cf 5f       	subi	r28, 0xFF	; 255
 162:	ee df       	rcall	.-36     	; 0x140 <PutChar>
 164:	f7 cf       	rjmp	.-18     	; 0x154 <PutString+0xa>
	}
}
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	08 95       	ret

0000016e <CdsTrans>:
	DisableClock();
	LED_OUT = 0x00;
}

void CdsTrans()
{
 16e:	ef 92       	push	r14
 170:	ff 92       	push	r15
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	60 97       	sbiw	r28, 0x10	; 16
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	f8 94       	cli
 184:	de bf       	out	0x3e, r29	; 62
 186:	0f be       	out	0x3f, r0	; 63
 188:	cd bf       	out	0x3d, r28	; 61
	activate = true;
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <activate>
	char buffer[BFR_MAX];
	CDS_OUT = CDS_OUT_PINS;
 190:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	while(activate)
	{
		int cdsValue = GetCdsValue();
		sprintf(buffer, "CDS : %d\r\n", cdsValue);
 194:	00 e0       	ldi	r16, 0x00	; 0
 196:	11 e0       	ldi	r17, 0x01	; 1
 198:	ce 01       	movw	r24, r28
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	7c 01       	movw	r14, r24
void CdsTrans()
{
	activate = true;
	char buffer[BFR_MAX];
	CDS_OUT = CDS_OUT_PINS;
	while(activate)
 19e:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <activate>
 1a2:	88 23       	and	r24, r24
 1a4:	d1 f0       	breq	.+52     	; 0x1da <CdsTrans+0x6c>
	{
		int cdsValue = GetCdsValue();
 1a6:	a3 df       	rcall	.-186    	; 0xee <GetCdsValue>
		sprintf(buffer, "CDS : %d\r\n", cdsValue);
 1a8:	9f 93       	push	r25
 1aa:	8f 93       	push	r24
 1ac:	1f 93       	push	r17
 1ae:	0f 93       	push	r16
 1b0:	ff 92       	push	r15
 1b2:	ef 92       	push	r14
 1b4:	6c d1       	rcall	.+728    	; 0x48e <sprintf>
		PutString(buffer);
 1b6:	c7 01       	movw	r24, r14
 1b8:	c8 df       	rcall	.-112    	; 0x14a <PutString>
 1ba:	9f ef       	ldi	r25, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	2f e3       	ldi	r18, 0x3F	; 63
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	91 50       	subi	r25, 0x01	; 1
 1c2:	20 40       	sbci	r18, 0x00	; 0
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <CdsTrans+0x52>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <CdsTrans+0x5c>
 1ca:	00 00       	nop
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	e2 cf       	rjmp	.-60     	; 0x19e <CdsTrans+0x30>
 1da:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		_delay_ms(100);
	}
	CDS_OUT = 0x00;
 1de:	60 96       	adiw	r28, 0x10	; 16
}
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	f8 94       	cli
 1e4:	de bf       	out	0x3e, r29	; 62
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	cd bf       	out	0x3d, r28	; 61
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	08 95       	ret

000001f8 <GetChar>:
 1f8:	5f 9b       	sbis	0x0b, 7	; 11
}

char GetChar()
{
	char data = NULL;
	while((UCSR0A & (1 << RXC0)) == (1 << RXC0))
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <GetChar+0x8>
	{
		data = UDR0;
 1fc:	8c b1       	in	r24, 0x0c	; 12
		return data;
 1fe:	08 95       	ret
	}
	return data;
 200:	80 e0       	ldi	r24, 0x00	; 0
}
 202:	08 95       	ret

00000204 <RunBuzzor>:
	return cdsValue;
}

void RunBuzzor(char data)
{
	activate = true;
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <activate>
	while(activate)
 20a:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <activate>
 20e:	99 23       	and	r25, r25
 210:	19 f0       	breq	.+6      	; 0x218 <RunBuzzor+0x14>
	{
		PlayBuzzorByMelody(data);
 212:	73 df       	rcall	.-282    	; 0xfa <PlayBuzzorByMelody>
		data = GetChar();
 214:	f1 df       	rcall	.-30     	; 0x1f8 <GetChar>
 216:	f9 cf       	rjmp	.-14     	; 0x20a <RunBuzzor+0x6>
 218:	17 ba       	out	0x17, r1	; 23
	}
	BUZZOR_PIN = 0x00;
 21a:	08 95       	ret

0000021c <FlushReceiveData>:
 21c:	5f 9b       	sbis	0x0b, 7	; 11
}

void FlushReceiveData()
{
	char flush;
	while((UCSR0A & (1 << RXC0)) == (1 << RXC0))
 21e:	02 c0       	rjmp	.+4      	; 0x224 <FlushReceiveData+0x8>
	{
		flush = UDR0;
 220:	8c b1       	in	r24, 0x0c	; 12
 222:	fc cf       	rjmp	.-8      	; 0x21c <FlushReceiveData>
	}
	UCSR0A |= (1 << RXC0);
 224:	5f 9a       	sbi	0x0b, 7	; 11
 226:	08 95       	ret

00000228 <__vector_1>:
	}

}

SIGNAL(INT0_vect)
{
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	0b b6       	in	r0, 0x3b	; 59
 234:	0f 92       	push	r0
 236:	2f 93       	push	r18
 238:	3f 93       	push	r19
 23a:	4f 93       	push	r20
 23c:	5f 93       	push	r21
 23e:	6f 93       	push	r22
 240:	7f 93       	push	r23
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
 246:	af 93       	push	r26
 248:	bf 93       	push	r27
 24a:	ef 93       	push	r30
 24c:	ff 93       	push	r31
	cli();
 24e:	f8 94       	cli
	activate = false;
 250:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <activate>
	isSendMenu = false;
 254:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <isSendMenu>
	FlushReceiveData();
 258:	e1 df       	rcall	.-62     	; 0x21c <FlushReceiveData>
	sei();
 25a:	78 94       	sei
}
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	0b be       	out	0x3b, r0	; 59
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <EnableClock>:
	UCSR0A |= (1 << RXC0);
}

void EnableClock()
{
	TCCR = TIMER_MODE | PRESCALER;
 282:	8f e0       	ldi	r24, 0x0F	; 15
 284:	83 bf       	out	0x33, r24	; 51
	TIMSK = TIMER_MASK;
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	87 bf       	out	0x37, r24	; 55
	OCR = OCR_TARGET;
 28a:	88 e4       	ldi	r24, 0x48	; 72
 28c:	81 bf       	out	0x31, r24	; 49
	TIFR |= TIMER_FLAG;
 28e:	86 b7       	in	r24, 0x36	; 54
 290:	82 60       	ori	r24, 0x02	; 2
 292:	86 bf       	out	0x36, r24	; 54
 294:	08 95       	ret

00000296 <delay_10ms>:
}

void delay_10ms(char ten_millis)
{
	timerCnt = 0;
 296:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <__data_end>
	while(activate && timerCnt < ten_millis);
 29a:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <activate>
 29e:	99 23       	and	r25, r25
 2a0:	21 f0       	breq	.+8      	; 0x2aa <delay_10ms+0x14>
 2a2:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <__data_end>
 2a6:	98 17       	cp	r25, r24
 2a8:	c0 f3       	brcs	.-16     	; 0x29a <delay_10ms+0x4>
	timerCnt = 0;
 2aa:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <__data_end>
 2ae:	08 95       	ret

000002b0 <DisableClock>:
}

void DisableClock()
{
	TIMSK &= ~(TIMER_MASK);
 2b0:	87 b7       	in	r24, 0x37	; 55
 2b2:	8d 7f       	andi	r24, 0xFD	; 253
 2b4:	87 bf       	out	0x37, r24	; 55
 2b6:	08 95       	ret

000002b8 <LedMove>:
	timerCnt++;
	sei();
}

void LedMove()
{
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
	activate = true;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <activate>
	EnableClock();
 2c2:	df df       	rcall	.-66     	; 0x282 <EnableClock>
	char led = 0x01;
	char ledDir = LED_LEFT;
 2c4:	d1 e0       	ldi	r29, 0x01	; 1

void LedMove()
{
	activate = true;
	EnableClock();
	char led = 0x01;
 2c6:	c1 e0       	ldi	r28, 0x01	; 1
	char ledDir = LED_LEFT;
	while(activate)
 2c8:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <activate>
 2cc:	88 23       	and	r24, r24
 2ce:	81 f0       	breq	.+32     	; 0x2f0 <LedMove+0x38>
	{
		LED_OUT = led;
 2d0:	cb bb       	out	0x1b, r28	; 27
		if(ledDir == LED_LEFT)
 2d2:	d1 30       	cpi	r29, 0x01	; 1
 2d4:	21 f4       	brne	.+8      	; 0x2de <LedMove+0x26>
		{
			led <<= 1;
 2d6:	cc 0f       	add	r28, r28
		else if(ledDir == LED_RIGHT)
		{
			led >>= 1;
		}
		
		if(led == 0x80)
 2d8:	c0 38       	cpi	r28, 0x80	; 128
 2da:	11 f4       	brne	.+4      	; 0x2e0 <LedMove+0x28>
 2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <LedMove+0x30>
		{
			led <<= 1;
		}
		else if(ledDir == LED_RIGHT)
		{
			led >>= 1;
 2de:	c6 95       	lsr	r28
		
		if(led == 0x80)
		{
			ledDir = LED_RIGHT;
		}
		else if(led == 0x01)
 2e0:	c1 30       	cpi	r28, 0x01	; 1
 2e2:	19 f4       	brne	.+6      	; 0x2ea <LedMove+0x32>
		{
			ledDir = LED_LEFT;
 2e4:	d1 e0       	ldi	r29, 0x01	; 1
 2e6:	01 c0       	rjmp	.+2      	; 0x2ea <LedMove+0x32>
			led >>= 1;
		}
		
		if(led == 0x80)
		{
			ledDir = LED_RIGHT;
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else if(led == 0x01)
		{
			ledDir = LED_LEFT;
		}
		delay_10ms(50);
 2ea:	82 e3       	ldi	r24, 0x32	; 50
 2ec:	d4 df       	rcall	.-88     	; 0x296 <delay_10ms>
	}
	DisableClock();
 2ee:	ec cf       	rjmp	.-40     	; 0x2c8 <LedMove+0x10>
 2f0:	df df       	rcall	.-66     	; 0x2b0 <DisableClock>
	LED_OUT = 0x00;
 2f2:	1b ba       	out	0x1b, r1	; 27
}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <RunMortorByDir>:
	}
	MOTOR_OUT = 0x00;
}

void RunMortorByDir(char dir)
{
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	c8 2f       	mov	r28, r24
	EnableClock();
 302:	bf df       	rcall	.-130    	; 0x282 <EnableClock>
	char index;
	if(dir == 'f')
 304:	c6 36       	cpi	r28, 0x66	; 102
 306:	91 f4       	brne	.+36     	; 0x32c <RunMortorByDir+0x32>
 308:	c5 e0       	ldi	r28, 0x05	; 5
 30a:	d0 e0       	ldi	r29, 0x00	; 0
 30c:	11 e0       	ldi	r17, 0x01	; 1
	{
		index = 0x01;
		while(activate && index != 0x10)
 30e:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <activate>
 312:	81 11       	cpse	r24, r1
 314:	04 c0       	rjmp	.+8      	; 0x31e <RunMortorByDir+0x24>
			index >>= 1;
			delay_10ms(1);
		}
	}
	DisableClock();
}
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
			MOTOR_OUT = index;
			index >>= 1;
			delay_10ms(1);
		}
	}
	DisableClock();
 31a:	1f 91       	pop	r17
 31c:	c9 cf       	rjmp	.-110    	; 0x2b0 <DisableClock>
 31e:	21 97       	sbiw	r28, 0x01	; 1
	EnableClock();
	char index;
	if(dir == 'f')
	{
		index = 0x01;
		while(activate && index != 0x10)
 320:	d1 f3       	breq	.-12     	; 0x316 <RunMortorByDir+0x1c>
		{
			MOTOR_OUT = index;
 322:	15 bb       	out	0x15, r17	; 21
			index <<= 1;
			delay_10ms(1);
 324:	11 0f       	add	r17, r17
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	b6 df       	rcall	.-148    	; 0x296 <delay_10ms>
 32a:	f1 cf       	rjmp	.-30     	; 0x30e <RunMortorByDir+0x14>
		}
	}
	else if(dir == 'r')
 32c:	c2 37       	cpi	r28, 0x72	; 114
 32e:	99 f7       	brne	.-26     	; 0x316 <RunMortorByDir+0x1c>
 330:	c9 e0       	ldi	r28, 0x09	; 9
 332:	d0 e0       	ldi	r29, 0x00	; 0
 334:	10 e8       	ldi	r17, 0x80	; 128
	{
		index = 0x80;
		while(activate && index != 0x00)
 336:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <activate>
 33a:	88 23       	and	r24, r24
 33c:	61 f3       	breq	.-40     	; 0x316 <RunMortorByDir+0x1c>
 33e:	21 97       	sbiw	r28, 0x01	; 1
 340:	51 f3       	breq	.-44     	; 0x316 <RunMortorByDir+0x1c>
		{
			MOTOR_OUT = index;
			index >>= 1;
 342:	15 bb       	out	0x15, r17	; 21
			delay_10ms(1);
 344:	16 95       	lsr	r17
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	a6 df       	rcall	.-180    	; 0x296 <delay_10ms>
 34a:	f5 cf       	rjmp	.-22     	; 0x336 <RunMortorByDir+0x3c>

0000034c <RunMortor>:
	}
}

void RunMortor()
{
	activate = true;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <activate>
	while(activate)
 352:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <activate>
 356:	88 23       	and	r24, r24
 358:	19 f0       	breq	.+6      	; 0x360 <RunMortor+0x14>
	{
		char dir = GetChar();
 35a:	4e df       	rcall	.-356    	; 0x1f8 <GetChar>
		RunMortorByDir(dir);
 35c:	ce df       	rcall	.-100    	; 0x2fa <RunMortorByDir>
 35e:	f9 cf       	rjmp	.-14     	; 0x352 <RunMortor+0x6>
 360:	15 ba       	out	0x15, r1	; 21
	}
	MOTOR_OUT = 0x00;
 362:	08 95       	ret

00000364 <main>:
 364:	8f ef       	ldi	r24, 0xFF	; 255
volatile char timerCnt = 0;

int main(void)
{
	// 각 핀 입출력 설정
	LED_PIN = LED_PIN_MODE;
 366:	8a bb       	out	0x1a, r24	; 26
	BTN_PIN = BTN_PIN_MODE;
 368:	88 98       	cbi	0x11, 0	; 17
	CDS_PIN = CDS_PIN_MODE;
 36a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 36e:	8c 7f       	andi	r24, 0xFC	; 252
 370:	81 60       	ori	r24, 0x01	; 1
 372:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	MOTOR_PIN = MOTOR_PIN_MODE;
 376:	8f e0       	ldi	r24, 0x0F	; 15
 378:	84 bb       	out	0x14, r24	; 20
	UART_PIN = UART_PIN_MODE;
 37a:	82 b1       	in	r24, 0x02	; 2
 37c:	8c 7f       	andi	r24, 0xFC	; 252
 37e:	82 60       	ori	r24, 0x02	; 2
 380:	82 b9       	out	0x02, r24	; 2
	
	// 인터럽트 설정
	EIMSK = (1 << INT0);
 382:	21 e0       	ldi	r18, 0x01	; 1
 384:	29 bf       	out	0x39, r18	; 57
	EICRA = (1 << ISC00) | (1 << ISC01);
 386:	93 e0       	ldi	r25, 0x03	; 3
 388:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIFR |= (1 << INTF0);
 38c:	88 b7       	in	r24, 0x38	; 56
 38e:	81 60       	ori	r24, 0x01	; 1
 390:	88 bf       	out	0x38, r24	; 56
	
	// A/D 컨버터 설정
	ADMUX = (1 << MUX0);
 392:	27 b9       	out	0x07, r18	; 7
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);
 394:	86 e8       	ldi	r24, 0x86	; 134
 396:	86 b9       	out	0x06, r24	; 6
	
	// UART 통신 설정
	UCSR0A = 0x00;
 398:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 39a:	88 e1       	ldi	r24, 0x18	; 24
 39c:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 39e:	86 e0       	ldi	r24, 0x06	; 6
 3a0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H = 0x00;
 3a4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0x03;
 3a8:	99 b9       	out	0x09, r25	; 9
	
	// 부저 PWM 설정
	TCCR1A |= (1 << COM1C1) | (1 << WGM31);
 3aa:	8f b5       	in	r24, 0x2f	; 47
 3ac:	8a 60       	ori	r24, 0x0A	; 10
 3ae:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM33) | (1 << WGM32) | (1 << CS30);
 3b0:	8e b5       	in	r24, 0x2e	; 46
 3b2:	89 61       	ori	r24, 0x19	; 25
 3b4:	8e bd       	out	0x2e, r24	; 46
	TCCR1C = 0x00;
 3b6:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	TCNT1 = 0;
 3ba:	1d bc       	out	0x2d, r1	; 45
 3bc:	1c bc       	out	0x2c, r1	; 44
	
	sei();
 3be:	78 94       	sei
	EnableClock();
 3c0:	60 df       	rcall	.-320    	; 0x282 <EnableClock>
	while(1)
	{
		if(isSendMenu == false)
		{
			PutString(menu);
			isSendMenu = true;
 3c2:	c1 e0       	ldi	r28, 0x01	; 1
	
	sei();
	EnableClock();
	while(1)
	{
		if(isSendMenu == false)
 3c4:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <isSendMenu>
 3c8:	81 11       	cpse	r24, r1
 3ca:	05 c0       	rjmp	.+10     	; 0x3d6 <main+0x72>
		{
			PutString(menu);
 3cc:	8b e0       	ldi	r24, 0x0B	; 11
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	bc de       	rcall	.-648    	; 0x14a <PutString>
			isSendMenu = true;
 3d2:	c0 93 b9 01 	sts	0x01B9, r28	; 0x8001b9 <isSendMenu>
		}
		
		char data = GetChar();
 3d6:	10 df       	rcall	.-480    	; 0x1f8 <GetChar>
		switch(data)
 3d8:	8c 34       	cpi	r24, 0x4C	; 76
 3da:	99 f0       	breq	.+38     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3dc:	38 f4       	brcc	.+14     	; 0x3ec <main+0x88>
 3de:	80 33       	cpi	r24, 0x30	; 48
 3e0:	88 f3       	brcs	.-30     	; 0x3c4 <main+0x60>
 3e2:	88 33       	cpi	r24, 0x38	; 56
 3e4:	a0 f0       	brcs	.+40     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3e6:	83 34       	cpi	r24, 0x43	; 67
 3e8:	71 f0       	breq	.+28     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3ea:	ec cf       	rjmp	.-40     	; 0x3c4 <main+0x60>
 3ec:	83 36       	cpi	r24, 0x63	; 99
 3ee:	59 f0       	breq	.+22     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f0:	18 f4       	brcc	.+6      	; 0x3f8 <main+0x94>
 3f2:	83 35       	cpi	r24, 0x53	; 83
 3f4:	51 f0       	breq	.+20     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3f6:	e6 cf       	rjmp	.-52     	; 0x3c4 <main+0x60>
 3f8:	8c 36       	cpi	r24, 0x6C	; 108
 3fa:	19 f0       	breq	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fc:	83 37       	cpi	r24, 0x73	; 115
 3fe:	29 f0       	breq	.+10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		{
		case INPUT_KEY_LED_LOWER:
		case INPUT_KEY_LED_UPPER:
			LedMove();
 400:	e1 cf       	rjmp	.-62     	; 0x3c4 <main+0x60>
		break;
 402:	5a df       	rcall	.-332    	; 0x2b8 <LedMove>
		
		case INPUT_KEY_CDS_LOWER:
		case INPUT_KEY_CDS_UPPER:
			CdsTrans();
 404:	df cf       	rjmp	.-66     	; 0x3c4 <main+0x60>
		break;
 406:	b3 de       	rcall	.-666    	; 0x16e <CdsTrans>
		
		case INPUT_KEY_MOTOR_LOWER:
		case INPUT_KEY_MOTOR_UPPER:
			RunMortor();
 408:	dd cf       	rjmp	.-70     	; 0x3c4 <main+0x60>
 40a:	a0 df       	rcall	.-192    	; 0x34c <RunMortor>
		break;
 40c:	db cf       	rjmp	.-74     	; 0x3c4 <main+0x60>
		case INPUT_KEY_MEL_F:
		case INPUT_KEY_MEL_G:
		case INPUT_KEY_MEL_A:
		case INPUT_KEY_MEL_B:
		case INPUT_KEY_MEL_C_HIGH:
			RunBuzzor(data);
 40e:	fa de       	rcall	.-524    	; 0x204 <RunBuzzor>
 410:	d9 cf       	rjmp	.-78     	; 0x3c4 <main+0x60>

00000412 <__divmodsi4>:
		break;
 412:	05 2e       	mov	r0, r21
 414:	97 fb       	bst	r25, 7
 416:	16 f4       	brtc	.+4      	; 0x41c <__divmodsi4+0xa>
 418:	00 94       	com	r0
 41a:	0f d0       	rcall	.+30     	; 0x43a <__negsi2>
 41c:	57 fd       	sbrc	r21, 7
 41e:	05 d0       	rcall	.+10     	; 0x42a <__divmodsi4_neg2>
 420:	14 d0       	rcall	.+40     	; 0x44a <__udivmodsi4>
 422:	07 fc       	sbrc	r0, 7
 424:	02 d0       	rcall	.+4      	; 0x42a <__divmodsi4_neg2>
 426:	46 f4       	brtc	.+16     	; 0x438 <__divmodsi4_exit>
 428:	08 c0       	rjmp	.+16     	; 0x43a <__negsi2>

0000042a <__divmodsi4_neg2>:
 42a:	50 95       	com	r21
 42c:	40 95       	com	r20
 42e:	30 95       	com	r19
 430:	21 95       	neg	r18
 432:	3f 4f       	sbci	r19, 0xFF	; 255
 434:	4f 4f       	sbci	r20, 0xFF	; 255
 436:	5f 4f       	sbci	r21, 0xFF	; 255

00000438 <__divmodsi4_exit>:
 438:	08 95       	ret

0000043a <__negsi2>:
 43a:	90 95       	com	r25
 43c:	80 95       	com	r24
 43e:	70 95       	com	r23
 440:	61 95       	neg	r22
 442:	7f 4f       	sbci	r23, 0xFF	; 255
 444:	8f 4f       	sbci	r24, 0xFF	; 255
 446:	9f 4f       	sbci	r25, 0xFF	; 255
 448:	08 95       	ret

0000044a <__udivmodsi4>:
 44a:	a1 e2       	ldi	r26, 0x21	; 33
 44c:	1a 2e       	mov	r1, r26
 44e:	aa 1b       	sub	r26, r26
 450:	bb 1b       	sub	r27, r27
 452:	fd 01       	movw	r30, r26
 454:	0d c0       	rjmp	.+26     	; 0x470 <__udivmodsi4_ep>

00000456 <__udivmodsi4_loop>:
 456:	aa 1f       	adc	r26, r26
 458:	bb 1f       	adc	r27, r27
 45a:	ee 1f       	adc	r30, r30
 45c:	ff 1f       	adc	r31, r31
 45e:	a2 17       	cp	r26, r18
 460:	b3 07       	cpc	r27, r19
 462:	e4 07       	cpc	r30, r20
 464:	f5 07       	cpc	r31, r21
 466:	20 f0       	brcs	.+8      	; 0x470 <__udivmodsi4_ep>
 468:	a2 1b       	sub	r26, r18
 46a:	b3 0b       	sbc	r27, r19
 46c:	e4 0b       	sbc	r30, r20
 46e:	f5 0b       	sbc	r31, r21

00000470 <__udivmodsi4_ep>:
 470:	66 1f       	adc	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	88 1f       	adc	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	1a 94       	dec	r1
 47a:	69 f7       	brne	.-38     	; 0x456 <__udivmodsi4_loop>
 47c:	60 95       	com	r22
 47e:	70 95       	com	r23
 480:	80 95       	com	r24
 482:	90 95       	com	r25
 484:	9b 01       	movw	r18, r22
 486:	ac 01       	movw	r20, r24
 488:	bd 01       	movw	r22, r26
 48a:	cf 01       	movw	r24, r30
 48c:	08 95       	ret

0000048e <sprintf>:
 48e:	0f 93       	push	r16
 490:	1f 93       	push	r17
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
 49a:	2e 97       	sbiw	r28, 0x0e	; 14
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	f8 94       	cli
 4a0:	de bf       	out	0x3e, r29	; 62
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	cd bf       	out	0x3d, r28	; 61
 4a6:	0d 89       	ldd	r16, Y+21	; 0x15
 4a8:	1e 89       	ldd	r17, Y+22	; 0x16
 4aa:	86 e0       	ldi	r24, 0x06	; 6
 4ac:	8c 83       	std	Y+4, r24	; 0x04
 4ae:	1a 83       	std	Y+2, r17	; 0x02
 4b0:	09 83       	std	Y+1, r16	; 0x01
 4b2:	8f ef       	ldi	r24, 0xFF	; 255
 4b4:	9f e7       	ldi	r25, 0x7F	; 127
 4b6:	9e 83       	std	Y+6, r25	; 0x06
 4b8:	8d 83       	std	Y+5, r24	; 0x05
 4ba:	ae 01       	movw	r20, r28
 4bc:	47 5e       	subi	r20, 0xE7	; 231
 4be:	5f 4f       	sbci	r21, 0xFF	; 255
 4c0:	6f 89       	ldd	r22, Y+23	; 0x17
 4c2:	78 8d       	ldd	r23, Y+24	; 0x18
 4c4:	ce 01       	movw	r24, r28
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	10 d0       	rcall	.+32     	; 0x4ea <vfprintf>
 4ca:	ef 81       	ldd	r30, Y+7	; 0x07
 4cc:	f8 85       	ldd	r31, Y+8	; 0x08
 4ce:	e0 0f       	add	r30, r16
 4d0:	f1 1f       	adc	r31, r17
 4d2:	10 82       	st	Z, r1
 4d4:	2e 96       	adiw	r28, 0x0e	; 14
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	f8 94       	cli
 4da:	de bf       	out	0x3e, r29	; 62
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	cd bf       	out	0x3d, r28	; 61
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	1f 91       	pop	r17
 4e6:	0f 91       	pop	r16
 4e8:	08 95       	ret

000004ea <vfprintf>:
 4ea:	2f 92       	push	r2
 4ec:	3f 92       	push	r3
 4ee:	4f 92       	push	r4
 4f0:	5f 92       	push	r5
 4f2:	6f 92       	push	r6
 4f4:	7f 92       	push	r7
 4f6:	8f 92       	push	r8
 4f8:	9f 92       	push	r9
 4fa:	af 92       	push	r10
 4fc:	bf 92       	push	r11
 4fe:	cf 92       	push	r12
 500:	df 92       	push	r13
 502:	ef 92       	push	r14
 504:	ff 92       	push	r15
 506:	0f 93       	push	r16
 508:	1f 93       	push	r17
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	cd b7       	in	r28, 0x3d	; 61
 510:	de b7       	in	r29, 0x3e	; 62
 512:	2b 97       	sbiw	r28, 0x0b	; 11
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	f8 94       	cli
 518:	de bf       	out	0x3e, r29	; 62
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	cd bf       	out	0x3d, r28	; 61
 51e:	6c 01       	movw	r12, r24
 520:	7b 01       	movw	r14, r22
 522:	8a 01       	movw	r16, r20
 524:	fc 01       	movw	r30, r24
 526:	17 82       	std	Z+7, r1	; 0x07
 528:	16 82       	std	Z+6, r1	; 0x06
 52a:	83 81       	ldd	r24, Z+3	; 0x03
 52c:	81 ff       	sbrs	r24, 1
 52e:	bf c1       	rjmp	.+894    	; 0x8ae <vfprintf+0x3c4>
 530:	ce 01       	movw	r24, r28
 532:	01 96       	adiw	r24, 0x01	; 1
 534:	3c 01       	movw	r6, r24
 536:	f6 01       	movw	r30, r12
 538:	93 81       	ldd	r25, Z+3	; 0x03
 53a:	f7 01       	movw	r30, r14
 53c:	93 fd       	sbrc	r25, 3
 53e:	85 91       	lpm	r24, Z+
 540:	93 ff       	sbrs	r25, 3
 542:	81 91       	ld	r24, Z+
 544:	7f 01       	movw	r14, r30
 546:	88 23       	and	r24, r24
 548:	09 f4       	brne	.+2      	; 0x54c <vfprintf+0x62>
 54a:	ad c1       	rjmp	.+858    	; 0x8a6 <vfprintf+0x3bc>
 54c:	85 32       	cpi	r24, 0x25	; 37
 54e:	39 f4       	brne	.+14     	; 0x55e <vfprintf+0x74>
 550:	93 fd       	sbrc	r25, 3
 552:	85 91       	lpm	r24, Z+
 554:	93 ff       	sbrs	r25, 3
 556:	81 91       	ld	r24, Z+
 558:	7f 01       	movw	r14, r30
 55a:	85 32       	cpi	r24, 0x25	; 37
 55c:	21 f4       	brne	.+8      	; 0x566 <vfprintf+0x7c>
 55e:	b6 01       	movw	r22, r12
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	d6 d1       	rcall	.+940    	; 0x910 <fputc>
 564:	e8 cf       	rjmp	.-48     	; 0x536 <vfprintf+0x4c>
 566:	91 2c       	mov	r9, r1
 568:	21 2c       	mov	r2, r1
 56a:	31 2c       	mov	r3, r1
 56c:	ff e1       	ldi	r31, 0x1F	; 31
 56e:	f3 15       	cp	r31, r3
 570:	d8 f0       	brcs	.+54     	; 0x5a8 <vfprintf+0xbe>
 572:	8b 32       	cpi	r24, 0x2B	; 43
 574:	79 f0       	breq	.+30     	; 0x594 <vfprintf+0xaa>
 576:	38 f4       	brcc	.+14     	; 0x586 <vfprintf+0x9c>
 578:	80 32       	cpi	r24, 0x20	; 32
 57a:	79 f0       	breq	.+30     	; 0x59a <vfprintf+0xb0>
 57c:	83 32       	cpi	r24, 0x23	; 35
 57e:	a1 f4       	brne	.+40     	; 0x5a8 <vfprintf+0xbe>
 580:	23 2d       	mov	r18, r3
 582:	20 61       	ori	r18, 0x10	; 16
 584:	1d c0       	rjmp	.+58     	; 0x5c0 <vfprintf+0xd6>
 586:	8d 32       	cpi	r24, 0x2D	; 45
 588:	61 f0       	breq	.+24     	; 0x5a2 <vfprintf+0xb8>
 58a:	80 33       	cpi	r24, 0x30	; 48
 58c:	69 f4       	brne	.+26     	; 0x5a8 <vfprintf+0xbe>
 58e:	23 2d       	mov	r18, r3
 590:	21 60       	ori	r18, 0x01	; 1
 592:	16 c0       	rjmp	.+44     	; 0x5c0 <vfprintf+0xd6>
 594:	83 2d       	mov	r24, r3
 596:	82 60       	ori	r24, 0x02	; 2
 598:	38 2e       	mov	r3, r24
 59a:	e3 2d       	mov	r30, r3
 59c:	e4 60       	ori	r30, 0x04	; 4
 59e:	3e 2e       	mov	r3, r30
 5a0:	2a c0       	rjmp	.+84     	; 0x5f6 <vfprintf+0x10c>
 5a2:	f3 2d       	mov	r31, r3
 5a4:	f8 60       	ori	r31, 0x08	; 8
 5a6:	1d c0       	rjmp	.+58     	; 0x5e2 <vfprintf+0xf8>
 5a8:	37 fc       	sbrc	r3, 7
 5aa:	2d c0       	rjmp	.+90     	; 0x606 <vfprintf+0x11c>
 5ac:	20 ed       	ldi	r18, 0xD0	; 208
 5ae:	28 0f       	add	r18, r24
 5b0:	2a 30       	cpi	r18, 0x0A	; 10
 5b2:	40 f0       	brcs	.+16     	; 0x5c4 <vfprintf+0xda>
 5b4:	8e 32       	cpi	r24, 0x2E	; 46
 5b6:	b9 f4       	brne	.+46     	; 0x5e6 <vfprintf+0xfc>
 5b8:	36 fc       	sbrc	r3, 6
 5ba:	75 c1       	rjmp	.+746    	; 0x8a6 <vfprintf+0x3bc>
 5bc:	23 2d       	mov	r18, r3
 5be:	20 64       	ori	r18, 0x40	; 64
 5c0:	32 2e       	mov	r3, r18
 5c2:	19 c0       	rjmp	.+50     	; 0x5f6 <vfprintf+0x10c>
 5c4:	36 fe       	sbrs	r3, 6
 5c6:	06 c0       	rjmp	.+12     	; 0x5d4 <vfprintf+0xea>
 5c8:	8a e0       	ldi	r24, 0x0A	; 10
 5ca:	98 9e       	mul	r9, r24
 5cc:	20 0d       	add	r18, r0
 5ce:	11 24       	eor	r1, r1
 5d0:	92 2e       	mov	r9, r18
 5d2:	11 c0       	rjmp	.+34     	; 0x5f6 <vfprintf+0x10c>
 5d4:	ea e0       	ldi	r30, 0x0A	; 10
 5d6:	2e 9e       	mul	r2, r30
 5d8:	20 0d       	add	r18, r0
 5da:	11 24       	eor	r1, r1
 5dc:	22 2e       	mov	r2, r18
 5de:	f3 2d       	mov	r31, r3
 5e0:	f0 62       	ori	r31, 0x20	; 32
 5e2:	3f 2e       	mov	r3, r31
 5e4:	08 c0       	rjmp	.+16     	; 0x5f6 <vfprintf+0x10c>
 5e6:	8c 36       	cpi	r24, 0x6C	; 108
 5e8:	21 f4       	brne	.+8      	; 0x5f2 <vfprintf+0x108>
 5ea:	83 2d       	mov	r24, r3
 5ec:	80 68       	ori	r24, 0x80	; 128
 5ee:	38 2e       	mov	r3, r24
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <vfprintf+0x10c>
 5f2:	88 36       	cpi	r24, 0x68	; 104
 5f4:	41 f4       	brne	.+16     	; 0x606 <vfprintf+0x11c>
 5f6:	f7 01       	movw	r30, r14
 5f8:	93 fd       	sbrc	r25, 3
 5fa:	85 91       	lpm	r24, Z+
 5fc:	93 ff       	sbrs	r25, 3
 5fe:	81 91       	ld	r24, Z+
 600:	7f 01       	movw	r14, r30
 602:	81 11       	cpse	r24, r1
 604:	b3 cf       	rjmp	.-154    	; 0x56c <vfprintf+0x82>
 606:	98 2f       	mov	r25, r24
 608:	9f 7d       	andi	r25, 0xDF	; 223
 60a:	95 54       	subi	r25, 0x45	; 69
 60c:	93 30       	cpi	r25, 0x03	; 3
 60e:	28 f4       	brcc	.+10     	; 0x61a <vfprintf+0x130>
 610:	0c 5f       	subi	r16, 0xFC	; 252
 612:	1f 4f       	sbci	r17, 0xFF	; 255
 614:	9f e3       	ldi	r25, 0x3F	; 63
 616:	99 83       	std	Y+1, r25	; 0x01
 618:	0d c0       	rjmp	.+26     	; 0x634 <vfprintf+0x14a>
 61a:	83 36       	cpi	r24, 0x63	; 99
 61c:	31 f0       	breq	.+12     	; 0x62a <vfprintf+0x140>
 61e:	83 37       	cpi	r24, 0x73	; 115
 620:	71 f0       	breq	.+28     	; 0x63e <vfprintf+0x154>
 622:	83 35       	cpi	r24, 0x53	; 83
 624:	09 f0       	breq	.+2      	; 0x628 <vfprintf+0x13e>
 626:	55 c0       	rjmp	.+170    	; 0x6d2 <vfprintf+0x1e8>
 628:	20 c0       	rjmp	.+64     	; 0x66a <vfprintf+0x180>
 62a:	f8 01       	movw	r30, r16
 62c:	80 81       	ld	r24, Z
 62e:	89 83       	std	Y+1, r24	; 0x01
 630:	0e 5f       	subi	r16, 0xFE	; 254
 632:	1f 4f       	sbci	r17, 0xFF	; 255
 634:	88 24       	eor	r8, r8
 636:	83 94       	inc	r8
 638:	91 2c       	mov	r9, r1
 63a:	53 01       	movw	r10, r6
 63c:	12 c0       	rjmp	.+36     	; 0x662 <vfprintf+0x178>
 63e:	28 01       	movw	r4, r16
 640:	f2 e0       	ldi	r31, 0x02	; 2
 642:	4f 0e       	add	r4, r31
 644:	51 1c       	adc	r5, r1
 646:	f8 01       	movw	r30, r16
 648:	a0 80       	ld	r10, Z
 64a:	b1 80       	ldd	r11, Z+1	; 0x01
 64c:	36 fe       	sbrs	r3, 6
 64e:	03 c0       	rjmp	.+6      	; 0x656 <vfprintf+0x16c>
 650:	69 2d       	mov	r22, r9
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <vfprintf+0x170>
 656:	6f ef       	ldi	r22, 0xFF	; 255
 658:	7f ef       	ldi	r23, 0xFF	; 255
 65a:	c5 01       	movw	r24, r10
 65c:	4e d1       	rcall	.+668    	; 0x8fa <strnlen>
 65e:	4c 01       	movw	r8, r24
 660:	82 01       	movw	r16, r4
 662:	f3 2d       	mov	r31, r3
 664:	ff 77       	andi	r31, 0x7F	; 127
 666:	3f 2e       	mov	r3, r31
 668:	15 c0       	rjmp	.+42     	; 0x694 <vfprintf+0x1aa>
 66a:	28 01       	movw	r4, r16
 66c:	22 e0       	ldi	r18, 0x02	; 2
 66e:	42 0e       	add	r4, r18
 670:	51 1c       	adc	r5, r1
 672:	f8 01       	movw	r30, r16
 674:	a0 80       	ld	r10, Z
 676:	b1 80       	ldd	r11, Z+1	; 0x01
 678:	36 fe       	sbrs	r3, 6
 67a:	03 c0       	rjmp	.+6      	; 0x682 <vfprintf+0x198>
 67c:	69 2d       	mov	r22, r9
 67e:	70 e0       	ldi	r23, 0x00	; 0
 680:	02 c0       	rjmp	.+4      	; 0x686 <vfprintf+0x19c>
 682:	6f ef       	ldi	r22, 0xFF	; 255
 684:	7f ef       	ldi	r23, 0xFF	; 255
 686:	c5 01       	movw	r24, r10
 688:	2d d1       	rcall	.+602    	; 0x8e4 <strnlen_P>
 68a:	4c 01       	movw	r8, r24
 68c:	f3 2d       	mov	r31, r3
 68e:	f0 68       	ori	r31, 0x80	; 128
 690:	3f 2e       	mov	r3, r31
 692:	82 01       	movw	r16, r4
 694:	33 fc       	sbrc	r3, 3
 696:	19 c0       	rjmp	.+50     	; 0x6ca <vfprintf+0x1e0>
 698:	82 2d       	mov	r24, r2
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	88 16       	cp	r8, r24
 69e:	99 06       	cpc	r9, r25
 6a0:	a0 f4       	brcc	.+40     	; 0x6ca <vfprintf+0x1e0>
 6a2:	b6 01       	movw	r22, r12
 6a4:	80 e2       	ldi	r24, 0x20	; 32
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	33 d1       	rcall	.+614    	; 0x910 <fputc>
 6aa:	2a 94       	dec	r2
 6ac:	f5 cf       	rjmp	.-22     	; 0x698 <vfprintf+0x1ae>
 6ae:	f5 01       	movw	r30, r10
 6b0:	37 fc       	sbrc	r3, 7
 6b2:	85 91       	lpm	r24, Z+
 6b4:	37 fe       	sbrs	r3, 7
 6b6:	81 91       	ld	r24, Z+
 6b8:	5f 01       	movw	r10, r30
 6ba:	b6 01       	movw	r22, r12
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	28 d1       	rcall	.+592    	; 0x910 <fputc>
 6c0:	21 10       	cpse	r2, r1
 6c2:	2a 94       	dec	r2
 6c4:	21 e0       	ldi	r18, 0x01	; 1
 6c6:	82 1a       	sub	r8, r18
 6c8:	91 08       	sbc	r9, r1
 6ca:	81 14       	cp	r8, r1
 6cc:	91 04       	cpc	r9, r1
 6ce:	79 f7       	brne	.-34     	; 0x6ae <vfprintf+0x1c4>
 6d0:	e1 c0       	rjmp	.+450    	; 0x894 <vfprintf+0x3aa>
 6d2:	84 36       	cpi	r24, 0x64	; 100
 6d4:	11 f0       	breq	.+4      	; 0x6da <vfprintf+0x1f0>
 6d6:	89 36       	cpi	r24, 0x69	; 105
 6d8:	39 f5       	brne	.+78     	; 0x728 <vfprintf+0x23e>
 6da:	f8 01       	movw	r30, r16
 6dc:	37 fe       	sbrs	r3, 7
 6de:	07 c0       	rjmp	.+14     	; 0x6ee <vfprintf+0x204>
 6e0:	60 81       	ld	r22, Z
 6e2:	71 81       	ldd	r23, Z+1	; 0x01
 6e4:	82 81       	ldd	r24, Z+2	; 0x02
 6e6:	93 81       	ldd	r25, Z+3	; 0x03
 6e8:	0c 5f       	subi	r16, 0xFC	; 252
 6ea:	1f 4f       	sbci	r17, 0xFF	; 255
 6ec:	08 c0       	rjmp	.+16     	; 0x6fe <vfprintf+0x214>
 6ee:	60 81       	ld	r22, Z
 6f0:	71 81       	ldd	r23, Z+1	; 0x01
 6f2:	07 2e       	mov	r0, r23
 6f4:	00 0c       	add	r0, r0
 6f6:	88 0b       	sbc	r24, r24
 6f8:	99 0b       	sbc	r25, r25
 6fa:	0e 5f       	subi	r16, 0xFE	; 254
 6fc:	1f 4f       	sbci	r17, 0xFF	; 255
 6fe:	f3 2d       	mov	r31, r3
 700:	ff 76       	andi	r31, 0x6F	; 111
 702:	3f 2e       	mov	r3, r31
 704:	97 ff       	sbrs	r25, 7
 706:	09 c0       	rjmp	.+18     	; 0x71a <vfprintf+0x230>
 708:	90 95       	com	r25
 70a:	80 95       	com	r24
 70c:	70 95       	com	r23
 70e:	61 95       	neg	r22
 710:	7f 4f       	sbci	r23, 0xFF	; 255
 712:	8f 4f       	sbci	r24, 0xFF	; 255
 714:	9f 4f       	sbci	r25, 0xFF	; 255
 716:	f0 68       	ori	r31, 0x80	; 128
 718:	3f 2e       	mov	r3, r31
 71a:	2a e0       	ldi	r18, 0x0A	; 10
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	a3 01       	movw	r20, r6
 720:	33 d1       	rcall	.+614    	; 0x988 <__ultoa_invert>
 722:	88 2e       	mov	r8, r24
 724:	86 18       	sub	r8, r6
 726:	44 c0       	rjmp	.+136    	; 0x7b0 <vfprintf+0x2c6>
 728:	85 37       	cpi	r24, 0x75	; 117
 72a:	31 f4       	brne	.+12     	; 0x738 <vfprintf+0x24e>
 72c:	23 2d       	mov	r18, r3
 72e:	2f 7e       	andi	r18, 0xEF	; 239
 730:	b2 2e       	mov	r11, r18
 732:	2a e0       	ldi	r18, 0x0A	; 10
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	25 c0       	rjmp	.+74     	; 0x782 <vfprintf+0x298>
 738:	93 2d       	mov	r25, r3
 73a:	99 7f       	andi	r25, 0xF9	; 249
 73c:	b9 2e       	mov	r11, r25
 73e:	8f 36       	cpi	r24, 0x6F	; 111
 740:	c1 f0       	breq	.+48     	; 0x772 <vfprintf+0x288>
 742:	18 f4       	brcc	.+6      	; 0x74a <vfprintf+0x260>
 744:	88 35       	cpi	r24, 0x58	; 88
 746:	79 f0       	breq	.+30     	; 0x766 <vfprintf+0x27c>
 748:	ae c0       	rjmp	.+348    	; 0x8a6 <vfprintf+0x3bc>
 74a:	80 37       	cpi	r24, 0x70	; 112
 74c:	19 f0       	breq	.+6      	; 0x754 <vfprintf+0x26a>
 74e:	88 37       	cpi	r24, 0x78	; 120
 750:	21 f0       	breq	.+8      	; 0x75a <vfprintf+0x270>
 752:	a9 c0       	rjmp	.+338    	; 0x8a6 <vfprintf+0x3bc>
 754:	e9 2f       	mov	r30, r25
 756:	e0 61       	ori	r30, 0x10	; 16
 758:	be 2e       	mov	r11, r30
 75a:	b4 fe       	sbrs	r11, 4
 75c:	0d c0       	rjmp	.+26     	; 0x778 <vfprintf+0x28e>
 75e:	fb 2d       	mov	r31, r11
 760:	f4 60       	ori	r31, 0x04	; 4
 762:	bf 2e       	mov	r11, r31
 764:	09 c0       	rjmp	.+18     	; 0x778 <vfprintf+0x28e>
 766:	34 fe       	sbrs	r3, 4
 768:	0a c0       	rjmp	.+20     	; 0x77e <vfprintf+0x294>
 76a:	29 2f       	mov	r18, r25
 76c:	26 60       	ori	r18, 0x06	; 6
 76e:	b2 2e       	mov	r11, r18
 770:	06 c0       	rjmp	.+12     	; 0x77e <vfprintf+0x294>
 772:	28 e0       	ldi	r18, 0x08	; 8
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	05 c0       	rjmp	.+10     	; 0x782 <vfprintf+0x298>
 778:	20 e1       	ldi	r18, 0x10	; 16
 77a:	30 e0       	ldi	r19, 0x00	; 0
 77c:	02 c0       	rjmp	.+4      	; 0x782 <vfprintf+0x298>
 77e:	20 e1       	ldi	r18, 0x10	; 16
 780:	32 e0       	ldi	r19, 0x02	; 2
 782:	f8 01       	movw	r30, r16
 784:	b7 fe       	sbrs	r11, 7
 786:	07 c0       	rjmp	.+14     	; 0x796 <vfprintf+0x2ac>
 788:	60 81       	ld	r22, Z
 78a:	71 81       	ldd	r23, Z+1	; 0x01
 78c:	82 81       	ldd	r24, Z+2	; 0x02
 78e:	93 81       	ldd	r25, Z+3	; 0x03
 790:	0c 5f       	subi	r16, 0xFC	; 252
 792:	1f 4f       	sbci	r17, 0xFF	; 255
 794:	06 c0       	rjmp	.+12     	; 0x7a2 <vfprintf+0x2b8>
 796:	60 81       	ld	r22, Z
 798:	71 81       	ldd	r23, Z+1	; 0x01
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	0e 5f       	subi	r16, 0xFE	; 254
 7a0:	1f 4f       	sbci	r17, 0xFF	; 255
 7a2:	a3 01       	movw	r20, r6
 7a4:	f1 d0       	rcall	.+482    	; 0x988 <__ultoa_invert>
 7a6:	88 2e       	mov	r8, r24
 7a8:	86 18       	sub	r8, r6
 7aa:	fb 2d       	mov	r31, r11
 7ac:	ff 77       	andi	r31, 0x7F	; 127
 7ae:	3f 2e       	mov	r3, r31
 7b0:	36 fe       	sbrs	r3, 6
 7b2:	0d c0       	rjmp	.+26     	; 0x7ce <vfprintf+0x2e4>
 7b4:	23 2d       	mov	r18, r3
 7b6:	2e 7f       	andi	r18, 0xFE	; 254
 7b8:	a2 2e       	mov	r10, r18
 7ba:	89 14       	cp	r8, r9
 7bc:	58 f4       	brcc	.+22     	; 0x7d4 <vfprintf+0x2ea>
 7be:	34 fe       	sbrs	r3, 4
 7c0:	0b c0       	rjmp	.+22     	; 0x7d8 <vfprintf+0x2ee>
 7c2:	32 fc       	sbrc	r3, 2
 7c4:	09 c0       	rjmp	.+18     	; 0x7d8 <vfprintf+0x2ee>
 7c6:	83 2d       	mov	r24, r3
 7c8:	8e 7e       	andi	r24, 0xEE	; 238
 7ca:	a8 2e       	mov	r10, r24
 7cc:	05 c0       	rjmp	.+10     	; 0x7d8 <vfprintf+0x2ee>
 7ce:	b8 2c       	mov	r11, r8
 7d0:	a3 2c       	mov	r10, r3
 7d2:	03 c0       	rjmp	.+6      	; 0x7da <vfprintf+0x2f0>
 7d4:	b8 2c       	mov	r11, r8
 7d6:	01 c0       	rjmp	.+2      	; 0x7da <vfprintf+0x2f0>
 7d8:	b9 2c       	mov	r11, r9
 7da:	a4 fe       	sbrs	r10, 4
 7dc:	0f c0       	rjmp	.+30     	; 0x7fc <vfprintf+0x312>
 7de:	fe 01       	movw	r30, r28
 7e0:	e8 0d       	add	r30, r8
 7e2:	f1 1d       	adc	r31, r1
 7e4:	80 81       	ld	r24, Z
 7e6:	80 33       	cpi	r24, 0x30	; 48
 7e8:	21 f4       	brne	.+8      	; 0x7f2 <vfprintf+0x308>
 7ea:	9a 2d       	mov	r25, r10
 7ec:	99 7e       	andi	r25, 0xE9	; 233
 7ee:	a9 2e       	mov	r10, r25
 7f0:	09 c0       	rjmp	.+18     	; 0x804 <vfprintf+0x31a>
 7f2:	a2 fe       	sbrs	r10, 2
 7f4:	06 c0       	rjmp	.+12     	; 0x802 <vfprintf+0x318>
 7f6:	b3 94       	inc	r11
 7f8:	b3 94       	inc	r11
 7fa:	04 c0       	rjmp	.+8      	; 0x804 <vfprintf+0x31a>
 7fc:	8a 2d       	mov	r24, r10
 7fe:	86 78       	andi	r24, 0x86	; 134
 800:	09 f0       	breq	.+2      	; 0x804 <vfprintf+0x31a>
 802:	b3 94       	inc	r11
 804:	a3 fc       	sbrc	r10, 3
 806:	10 c0       	rjmp	.+32     	; 0x828 <vfprintf+0x33e>
 808:	a0 fe       	sbrs	r10, 0
 80a:	06 c0       	rjmp	.+12     	; 0x818 <vfprintf+0x32e>
 80c:	b2 14       	cp	r11, r2
 80e:	80 f4       	brcc	.+32     	; 0x830 <vfprintf+0x346>
 810:	28 0c       	add	r2, r8
 812:	92 2c       	mov	r9, r2
 814:	9b 18       	sub	r9, r11
 816:	0d c0       	rjmp	.+26     	; 0x832 <vfprintf+0x348>
 818:	b2 14       	cp	r11, r2
 81a:	58 f4       	brcc	.+22     	; 0x832 <vfprintf+0x348>
 81c:	b6 01       	movw	r22, r12
 81e:	80 e2       	ldi	r24, 0x20	; 32
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	76 d0       	rcall	.+236    	; 0x910 <fputc>
 824:	b3 94       	inc	r11
 826:	f8 cf       	rjmp	.-16     	; 0x818 <vfprintf+0x32e>
 828:	b2 14       	cp	r11, r2
 82a:	18 f4       	brcc	.+6      	; 0x832 <vfprintf+0x348>
 82c:	2b 18       	sub	r2, r11
 82e:	02 c0       	rjmp	.+4      	; 0x834 <vfprintf+0x34a>
 830:	98 2c       	mov	r9, r8
 832:	21 2c       	mov	r2, r1
 834:	a4 fe       	sbrs	r10, 4
 836:	0f c0       	rjmp	.+30     	; 0x856 <vfprintf+0x36c>
 838:	b6 01       	movw	r22, r12
 83a:	80 e3       	ldi	r24, 0x30	; 48
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	68 d0       	rcall	.+208    	; 0x910 <fputc>
 840:	a2 fe       	sbrs	r10, 2
 842:	16 c0       	rjmp	.+44     	; 0x870 <vfprintf+0x386>
 844:	a1 fc       	sbrc	r10, 1
 846:	03 c0       	rjmp	.+6      	; 0x84e <vfprintf+0x364>
 848:	88 e7       	ldi	r24, 0x78	; 120
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	02 c0       	rjmp	.+4      	; 0x852 <vfprintf+0x368>
 84e:	88 e5       	ldi	r24, 0x58	; 88
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	b6 01       	movw	r22, r12
 854:	0c c0       	rjmp	.+24     	; 0x86e <vfprintf+0x384>
 856:	8a 2d       	mov	r24, r10
 858:	86 78       	andi	r24, 0x86	; 134
 85a:	51 f0       	breq	.+20     	; 0x870 <vfprintf+0x386>
 85c:	a1 fe       	sbrs	r10, 1
 85e:	02 c0       	rjmp	.+4      	; 0x864 <vfprintf+0x37a>
 860:	8b e2       	ldi	r24, 0x2B	; 43
 862:	01 c0       	rjmp	.+2      	; 0x866 <vfprintf+0x37c>
 864:	80 e2       	ldi	r24, 0x20	; 32
 866:	a7 fc       	sbrc	r10, 7
 868:	8d e2       	ldi	r24, 0x2D	; 45
 86a:	b6 01       	movw	r22, r12
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	50 d0       	rcall	.+160    	; 0x910 <fputc>
 870:	89 14       	cp	r8, r9
 872:	30 f4       	brcc	.+12     	; 0x880 <vfprintf+0x396>
 874:	b6 01       	movw	r22, r12
 876:	80 e3       	ldi	r24, 0x30	; 48
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	4a d0       	rcall	.+148    	; 0x910 <fputc>
 87c:	9a 94       	dec	r9
 87e:	f8 cf       	rjmp	.-16     	; 0x870 <vfprintf+0x386>
 880:	8a 94       	dec	r8
 882:	f3 01       	movw	r30, r6
 884:	e8 0d       	add	r30, r8
 886:	f1 1d       	adc	r31, r1
 888:	80 81       	ld	r24, Z
 88a:	b6 01       	movw	r22, r12
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	40 d0       	rcall	.+128    	; 0x910 <fputc>
 890:	81 10       	cpse	r8, r1
 892:	f6 cf       	rjmp	.-20     	; 0x880 <vfprintf+0x396>
 894:	22 20       	and	r2, r2
 896:	09 f4       	brne	.+2      	; 0x89a <vfprintf+0x3b0>
 898:	4e ce       	rjmp	.-868    	; 0x536 <vfprintf+0x4c>
 89a:	b6 01       	movw	r22, r12
 89c:	80 e2       	ldi	r24, 0x20	; 32
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	37 d0       	rcall	.+110    	; 0x910 <fputc>
 8a2:	2a 94       	dec	r2
 8a4:	f7 cf       	rjmp	.-18     	; 0x894 <vfprintf+0x3aa>
 8a6:	f6 01       	movw	r30, r12
 8a8:	86 81       	ldd	r24, Z+6	; 0x06
 8aa:	97 81       	ldd	r25, Z+7	; 0x07
 8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <vfprintf+0x3c8>
 8ae:	8f ef       	ldi	r24, 0xFF	; 255
 8b0:	9f ef       	ldi	r25, 0xFF	; 255
 8b2:	2b 96       	adiw	r28, 0x0b	; 11
 8b4:	0f b6       	in	r0, 0x3f	; 63
 8b6:	f8 94       	cli
 8b8:	de bf       	out	0x3e, r29	; 62
 8ba:	0f be       	out	0x3f, r0	; 63
 8bc:	cd bf       	out	0x3d, r28	; 61
 8be:	df 91       	pop	r29
 8c0:	cf 91       	pop	r28
 8c2:	1f 91       	pop	r17
 8c4:	0f 91       	pop	r16
 8c6:	ff 90       	pop	r15
 8c8:	ef 90       	pop	r14
 8ca:	df 90       	pop	r13
 8cc:	cf 90       	pop	r12
 8ce:	bf 90       	pop	r11
 8d0:	af 90       	pop	r10
 8d2:	9f 90       	pop	r9
 8d4:	8f 90       	pop	r8
 8d6:	7f 90       	pop	r7
 8d8:	6f 90       	pop	r6
 8da:	5f 90       	pop	r5
 8dc:	4f 90       	pop	r4
 8de:	3f 90       	pop	r3
 8e0:	2f 90       	pop	r2
 8e2:	08 95       	ret

000008e4 <strnlen_P>:
 8e4:	fc 01       	movw	r30, r24
 8e6:	05 90       	lpm	r0, Z+
 8e8:	61 50       	subi	r22, 0x01	; 1
 8ea:	70 40       	sbci	r23, 0x00	; 0
 8ec:	01 10       	cpse	r0, r1
 8ee:	d8 f7       	brcc	.-10     	; 0x8e6 <strnlen_P+0x2>
 8f0:	80 95       	com	r24
 8f2:	90 95       	com	r25
 8f4:	8e 0f       	add	r24, r30
 8f6:	9f 1f       	adc	r25, r31
 8f8:	08 95       	ret

000008fa <strnlen>:
 8fa:	fc 01       	movw	r30, r24
 8fc:	61 50       	subi	r22, 0x01	; 1
 8fe:	70 40       	sbci	r23, 0x00	; 0
 900:	01 90       	ld	r0, Z+
 902:	01 10       	cpse	r0, r1
 904:	d8 f7       	brcc	.-10     	; 0x8fc <strnlen+0x2>
 906:	80 95       	com	r24
 908:	90 95       	com	r25
 90a:	8e 0f       	add	r24, r30
 90c:	9f 1f       	adc	r25, r31
 90e:	08 95       	ret

00000910 <fputc>:
 910:	0f 93       	push	r16
 912:	1f 93       	push	r17
 914:	cf 93       	push	r28
 916:	df 93       	push	r29
 918:	fb 01       	movw	r30, r22
 91a:	23 81       	ldd	r18, Z+3	; 0x03
 91c:	21 fd       	sbrc	r18, 1
 91e:	03 c0       	rjmp	.+6      	; 0x926 <fputc+0x16>
 920:	8f ef       	ldi	r24, 0xFF	; 255
 922:	9f ef       	ldi	r25, 0xFF	; 255
 924:	2c c0       	rjmp	.+88     	; 0x97e <fputc+0x6e>
 926:	22 ff       	sbrs	r18, 2
 928:	16 c0       	rjmp	.+44     	; 0x956 <fputc+0x46>
 92a:	46 81       	ldd	r20, Z+6	; 0x06
 92c:	57 81       	ldd	r21, Z+7	; 0x07
 92e:	24 81       	ldd	r18, Z+4	; 0x04
 930:	35 81       	ldd	r19, Z+5	; 0x05
 932:	42 17       	cp	r20, r18
 934:	53 07       	cpc	r21, r19
 936:	44 f4       	brge	.+16     	; 0x948 <fputc+0x38>
 938:	a0 81       	ld	r26, Z
 93a:	b1 81       	ldd	r27, Z+1	; 0x01
 93c:	9d 01       	movw	r18, r26
 93e:	2f 5f       	subi	r18, 0xFF	; 255
 940:	3f 4f       	sbci	r19, 0xFF	; 255
 942:	31 83       	std	Z+1, r19	; 0x01
 944:	20 83       	st	Z, r18
 946:	8c 93       	st	X, r24
 948:	26 81       	ldd	r18, Z+6	; 0x06
 94a:	37 81       	ldd	r19, Z+7	; 0x07
 94c:	2f 5f       	subi	r18, 0xFF	; 255
 94e:	3f 4f       	sbci	r19, 0xFF	; 255
 950:	37 83       	std	Z+7, r19	; 0x07
 952:	26 83       	std	Z+6, r18	; 0x06
 954:	14 c0       	rjmp	.+40     	; 0x97e <fputc+0x6e>
 956:	8b 01       	movw	r16, r22
 958:	ec 01       	movw	r28, r24
 95a:	fb 01       	movw	r30, r22
 95c:	00 84       	ldd	r0, Z+8	; 0x08
 95e:	f1 85       	ldd	r31, Z+9	; 0x09
 960:	e0 2d       	mov	r30, r0
 962:	09 95       	icall
 964:	89 2b       	or	r24, r25
 966:	e1 f6       	brne	.-72     	; 0x920 <fputc+0x10>
 968:	d8 01       	movw	r26, r16
 96a:	16 96       	adiw	r26, 0x06	; 6
 96c:	8d 91       	ld	r24, X+
 96e:	9c 91       	ld	r25, X
 970:	17 97       	sbiw	r26, 0x07	; 7
 972:	01 96       	adiw	r24, 0x01	; 1
 974:	17 96       	adiw	r26, 0x07	; 7
 976:	9c 93       	st	X, r25
 978:	8e 93       	st	-X, r24
 97a:	16 97       	sbiw	r26, 0x06	; 6
 97c:	ce 01       	movw	r24, r28
 97e:	df 91       	pop	r29
 980:	cf 91       	pop	r28
 982:	1f 91       	pop	r17
 984:	0f 91       	pop	r16
 986:	08 95       	ret

00000988 <__ultoa_invert>:
 988:	fa 01       	movw	r30, r20
 98a:	aa 27       	eor	r26, r26
 98c:	28 30       	cpi	r18, 0x08	; 8
 98e:	51 f1       	breq	.+84     	; 0x9e4 <__ultoa_invert+0x5c>
 990:	20 31       	cpi	r18, 0x10	; 16
 992:	81 f1       	breq	.+96     	; 0x9f4 <__ultoa_invert+0x6c>
 994:	e8 94       	clt
 996:	6f 93       	push	r22
 998:	6e 7f       	andi	r22, 0xFE	; 254
 99a:	6e 5f       	subi	r22, 0xFE	; 254
 99c:	7f 4f       	sbci	r23, 0xFF	; 255
 99e:	8f 4f       	sbci	r24, 0xFF	; 255
 9a0:	9f 4f       	sbci	r25, 0xFF	; 255
 9a2:	af 4f       	sbci	r26, 0xFF	; 255
 9a4:	b1 e0       	ldi	r27, 0x01	; 1
 9a6:	3e d0       	rcall	.+124    	; 0xa24 <__ultoa_invert+0x9c>
 9a8:	b4 e0       	ldi	r27, 0x04	; 4
 9aa:	3c d0       	rcall	.+120    	; 0xa24 <__ultoa_invert+0x9c>
 9ac:	67 0f       	add	r22, r23
 9ae:	78 1f       	adc	r23, r24
 9b0:	89 1f       	adc	r24, r25
 9b2:	9a 1f       	adc	r25, r26
 9b4:	a1 1d       	adc	r26, r1
 9b6:	68 0f       	add	r22, r24
 9b8:	79 1f       	adc	r23, r25
 9ba:	8a 1f       	adc	r24, r26
 9bc:	91 1d       	adc	r25, r1
 9be:	a1 1d       	adc	r26, r1
 9c0:	6a 0f       	add	r22, r26
 9c2:	71 1d       	adc	r23, r1
 9c4:	81 1d       	adc	r24, r1
 9c6:	91 1d       	adc	r25, r1
 9c8:	a1 1d       	adc	r26, r1
 9ca:	20 d0       	rcall	.+64     	; 0xa0c <__ultoa_invert+0x84>
 9cc:	09 f4       	brne	.+2      	; 0x9d0 <__ultoa_invert+0x48>
 9ce:	68 94       	set
 9d0:	3f 91       	pop	r19
 9d2:	2a e0       	ldi	r18, 0x0A	; 10
 9d4:	26 9f       	mul	r18, r22
 9d6:	11 24       	eor	r1, r1
 9d8:	30 19       	sub	r19, r0
 9da:	30 5d       	subi	r19, 0xD0	; 208
 9dc:	31 93       	st	Z+, r19
 9de:	de f6       	brtc	.-74     	; 0x996 <__ultoa_invert+0xe>
 9e0:	cf 01       	movw	r24, r30
 9e2:	08 95       	ret
 9e4:	46 2f       	mov	r20, r22
 9e6:	47 70       	andi	r20, 0x07	; 7
 9e8:	40 5d       	subi	r20, 0xD0	; 208
 9ea:	41 93       	st	Z+, r20
 9ec:	b3 e0       	ldi	r27, 0x03	; 3
 9ee:	0f d0       	rcall	.+30     	; 0xa0e <__ultoa_invert+0x86>
 9f0:	c9 f7       	brne	.-14     	; 0x9e4 <__ultoa_invert+0x5c>
 9f2:	f6 cf       	rjmp	.-20     	; 0x9e0 <__ultoa_invert+0x58>
 9f4:	46 2f       	mov	r20, r22
 9f6:	4f 70       	andi	r20, 0x0F	; 15
 9f8:	40 5d       	subi	r20, 0xD0	; 208
 9fa:	4a 33       	cpi	r20, 0x3A	; 58
 9fc:	18 f0       	brcs	.+6      	; 0xa04 <__ultoa_invert+0x7c>
 9fe:	49 5d       	subi	r20, 0xD9	; 217
 a00:	31 fd       	sbrc	r19, 1
 a02:	40 52       	subi	r20, 0x20	; 32
 a04:	41 93       	st	Z+, r20
 a06:	02 d0       	rcall	.+4      	; 0xa0c <__ultoa_invert+0x84>
 a08:	a9 f7       	brne	.-22     	; 0x9f4 <__ultoa_invert+0x6c>
 a0a:	ea cf       	rjmp	.-44     	; 0x9e0 <__ultoa_invert+0x58>
 a0c:	b4 e0       	ldi	r27, 0x04	; 4
 a0e:	a6 95       	lsr	r26
 a10:	97 95       	ror	r25
 a12:	87 95       	ror	r24
 a14:	77 95       	ror	r23
 a16:	67 95       	ror	r22
 a18:	ba 95       	dec	r27
 a1a:	c9 f7       	brne	.-14     	; 0xa0e <__ultoa_invert+0x86>
 a1c:	00 97       	sbiw	r24, 0x00	; 0
 a1e:	61 05       	cpc	r22, r1
 a20:	71 05       	cpc	r23, r1
 a22:	08 95       	ret
 a24:	9b 01       	movw	r18, r22
 a26:	ac 01       	movw	r20, r24
 a28:	0a 2e       	mov	r0, r26
 a2a:	06 94       	lsr	r0
 a2c:	57 95       	ror	r21
 a2e:	47 95       	ror	r20
 a30:	37 95       	ror	r19
 a32:	27 95       	ror	r18
 a34:	ba 95       	dec	r27
 a36:	c9 f7       	brne	.-14     	; 0xa2a <__ultoa_invert+0xa2>
 a38:	62 0f       	add	r22, r18
 a3a:	73 1f       	adc	r23, r19
 a3c:	84 1f       	adc	r24, r20
 a3e:	95 1f       	adc	r25, r21
 a40:	a0 1d       	adc	r26, r0
 a42:	08 95       	ret

00000a44 <_exit>:
 a44:	f8 94       	cli

00000a46 <__stop_program>:
 a46:	ff cf       	rjmp	.-2      	; 0xa46 <__stop_program>
